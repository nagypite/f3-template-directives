<?php
/**
 *	Form TagHandler
 *
 *	The contents of this file are subject to the terms of the GNU General
 *	Public License Version 3.0. You may not use this file except in
 *	compliance with the license. Any of the license terms and conditions
 *	can be waived if you get permission from the copyright holder.
 *
 *	Copyright (c) 2018 ~ ikkez
 *	Christian Knuth <ikkez0n3@gmail.com>
 *
 *	@version: 1.0.0
 *	@date: 09.05.2018
 *
 **/

namespace Template\Tags;

class Form extends \Template\TagHandler {

	protected $srcKey;

	protected $dynamicSrcKey = false;

	protected $form_name;

	static public function initAll(\Template $tmpl=NULL) {
		if (!$tmpl)
			$tmpl = \Template::instance();
		static::init('form',$tmpl);
		\Template\Tags\Input::init('input',$tmpl);
		\Template\Tags\Select::init('select',$tmpl);
		\Template\Tags\Option::init('option',$tmpl);
		\Template\Tags\Textarea::init('textarea',$tmpl);
	}

	/**
	 * Form constructor.
	 * @param string $srcKey
	 */
	function __construct($srcKey='POST') {
		$this->srcKey=$srcKey;
		parent::__construct();
	}

	/**
	 * get hive key where to fetch the data
	 * @return string
	 */
	function getSrcKey() {
		return $this->srcKey;
	}

	/**
	 * set hive key where to fetch the data
	 * @param $val
	 */
	function setSrcKey($val) {
		$this->srcKey = $val;
	}

	/**
	 * return currently active form
	 * @return mixed
	 */
	function getFormName() {
		return $this->form_name;
	}

	/**
	 * enable/disable dynamic source key
	 * if enabled, the source key is generated by the form name attribute
	 * and located at "FORM.formName" instead of "POST"
	 *
	 * @param bool $state
	 */
	function setDynamicSrcKey($state) {
		$this->dynamicSrcKey = $state;
		if (!$state)
			$this->srcKey='POST';
	}

	/**
	 * @param array $node
	 * @param array $attr
	 * @return string
	 */
	protected function resolveContent($node, $attr) {
		// make the current scope available to nested elements
		if (array_key_exists("name", $attr)) {
			$this->form_name = $attr['name'];
			if (preg_match('/{{(.+?)}}/s', $this->form_name))
				$this->form_name = $this->tmpl->build($this->form_name);
			if ($this->dynamicSrcKey)
				$this->srcKey='FORM[\''.$this->form_name.'\']';
		}
		$out = parent::resolveContent($node,$attr);
		$this->form_name = NULL;
		return $out;
	}

	/**
	 * build tag string
	 * @param $attr
	 * @param $content
	 * @return string
	 */
  function build($attr, $content) {
    if (!empty($attr['action'])) {
      $attr['data-original-action'] = $attr['action'];
      $attr['action'] = \TemplateHelper::instance()->path($attr['action']);
    }

		// resolve all other / unhandled tag attributes
		$attr = $this->resolveParams($attr);
		// create element and return
		return '<form'.$attr.'>'.$content.'</form>';
	}
}
